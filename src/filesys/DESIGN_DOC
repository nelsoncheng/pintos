                    +-------------------------+
                    |           CS 439        |
                    | PROJECT 4: FILE SYSTEMS |
                    |      DESIGN DOCUMENT    |
                    +-------------------------+

****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name:
EID:
CS login:
Email:
Unique Number:


Slip days used on this project:

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1:
EID1:
CS login:
Email:
Unique Number:
Ranking (scale below):

Name2:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):

Name3:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.




---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In struct inode_disk: changed the structure to the following:
struct inode_disk
 {
   off_t length;                                  /* File size in bytes. */
   unsigned magic;                                /* Magic number. */
 
   block_sector_t blocks[INODE_SIZE];             /* Location of actual data blocks on disk */
   block_sector_t indirect1_block;                /* Pointer to first indirect inode on disk */
   block_sector_t indirect2_block;                /* Pointer to second indirect inode on disk */
   block_sector_t indirect2_2_block;
   struct inode_disk_indirect * indirect1;        /* Pointer to inode of pointers to device blocks */
   struct inode_disk_double_indirect * indirect2; /* Pointer to inode of pointers to inodes of pointers to device blocks */
   struct inode_disk_double_indirect * indirect2_2;
 
 };
 This structure stays within 512 bytes while holding enough pointers to store up to 8 megabytes.
 
 struct inode_disk_indirect
{
   block_sector_t blocks[INODE_INDIRECT_SIZE];     /* Location of actual data blocks on disk */
};
This structure supplements the regular inode and serves as the first level of indirection.

struct inode_disk_double_indirect
{
   block_sector_t inode_blocks[INODE_INDIRECT_2_SIZE];     /* pointers to inode_disk_indirect on disk */
   struct inode_disk_indirect * table_array[INODE_INDIRECT_2_SIZE]; /* pointers to inode_disk_indirect while in memory*/
}; This structure supplements the regular inode and serves as the second level of indirection

Also added a semaphore to struct inode in order to lock out multiple threads from extending a file at once.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

120 sectors in base + 128 sectors in 1st level + 8192 (64 * 128 first levels) sectors in second level + 8192 sectors
in second second level = 16632 total sectors, 16632 * 512 = 8361984 bytes
---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

Files that attempt to extend a file must acquire a semaphore owned by the inode in question.
Writes that dont extend the file are not subject to this requirement.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

When a read would extend past the EOF, it too must acquire a semaphore in order to start reading. This only 
applies to reads that end up past the EOF. A process that extends the file
doesn't update the length of the file until after it is done extending everything, so it is 
impossible for a reader/writer to try and read the extended area before it is done being written to.


>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

The only time processes block other processes from reading/writing is during an extension step,
the extension steps always finish eventually so the files waiting on the semaphore will be able to
access the file in the order that they started waiting on the semaphore.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

The inode structure is a multilevel index because it is the way we were taught in class/ advised on the project
page to do this project this way. There is 120 baseline sectors, 1 indirect pointer that points to 128 more sectors
and 2 indirect pointers that point to 8192 other sectors. This way, the inode has a maximum capacity of barely 
greater than 8MB, the required filesize limit.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

Given the path, we tokenize the string by the unix separator '/'. If the starting character is a '/', the currently referenced directory is set to root. Else, the tracked directory is the current working directory of the running thread.

Next we loop through the tokens. There are a couple cases to handle: if the token is '.', the tracked directory remains the same. If the token is '..', the tracked directory moves up to its parent. Else if the token is a standard alphanumerical string, the directory calls a look up. If the name exists and is a directory, it becomes the new tracked directory. Else if it is a file, we check to make sure that it is the last token in the path. If none of these are true, then the path is invalid according to th filesystem standards.

 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

Every operation in directory should be atomic and locked by the directory's inode. For example, adding or removing from a directory requires the lock held by the inode. This way, we guarantee that a file can only be modified by one process at a time and avoid duplicates/race conditions.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

No. Upon calling remove, we check if any process is using the directory. We look at the inode's open count and ensuring that it is at 1.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

I chose to represent the current directory this way from a high level because it is simple and similar to the linux filesystem. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
